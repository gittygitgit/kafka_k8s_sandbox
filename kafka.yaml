---
# Source: kafka/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-1.0.2
    release: RELEASE-NAME
    heritage: Tiller
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: 
      protocol: TCP
    - name: election
      port: 3888
      targetPort: 
      protocol: TCP
    - name: server
      port: 2888
      targetPort: 
      protocol: TCP
  selector:
    app: zookeeper
    release: RELEASE-NAME

---
# Source: kafka/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.2
    release: RELEASE-NAME
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: client
      
  selector:
    app: zookeeper
    release: RELEASE-NAME

---
# Source: kafka/templates/service-brokers-external.yaml

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    dns.alpha.kubernetes.io/internal: "RELEASE-NAME.cluster.local"
    external-dns.alpha.kubernetes.io/hostname: "RELEASE-NAME.cluster.local"
  name: RELEASE-NAME-0-external
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
    pod: "RELEASE-NAME-kafka-0"
spec:
  type: NodePort
  ports:
    - name: external-broker
      port: 19092
      targetPort: 31090
      nodePort: 31090
      protocol: TCP
  selector:
    app: kafka
    release: RELEASE-NAME
    pod: "RELEASE-NAME-kafka-0"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    dns.alpha.kubernetes.io/internal: "RELEASE-NAME.cluster.local"
    external-dns.alpha.kubernetes.io/hostname: "RELEASE-NAME.cluster.local"
  name: RELEASE-NAME-1-external
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
    pod: "RELEASE-NAME-kafka-1"
spec:
  type: NodePort
  ports:
    - name: external-broker
      port: 19092
      targetPort: 31091
      nodePort: 31091
      protocol: TCP
  selector:
    app: kafka
    release: RELEASE-NAME
    pod: "RELEASE-NAME-kafka-1"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    dns.alpha.kubernetes.io/internal: "RELEASE-NAME.cluster.local"
    external-dns.alpha.kubernetes.io/hostname: "RELEASE-NAME.cluster.local"
  name: RELEASE-NAME-2-external
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
    pod: "RELEASE-NAME-kafka-2"
spec:
  type: NodePort
  ports:
    - name: external-broker
      port: 19092
      targetPort: 31092
      nodePort: 31092
      protocol: TCP
  selector:
    app: kafka
    release: RELEASE-NAME
    pod: "RELEASE-NAME-kafka-2"

---
# Source: kafka/templates/service-brokers.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-kafka
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
spec:
  ports:
  - name: broker
    port: 9092
    targetPort: kafka
  selector:
    app: kafka
    release: RELEASE-NAME
---

---
# Source: kafka/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-kafka-headless
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: broker
    port: 9092
  clusterIP: None
  selector:
    app: kafka
    release: RELEASE-NAME

---
# Source: kafka/templates/tests/test_topic_create_consume_produce.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-test-topic-create-consume-produce"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: RELEASE-NAME-test-consume
    image: confluentinc/cp-kafka:4.1.2-2
    command:
    - sh
    - -c
    - |
      # Create the topic
      kafka-topics --zookeeper RELEASE-NAME-zookeeper:2181 --topic helm-test-topic-create-consume-produce --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list RELEASE-NAME-kafka:9092 --topic helm-test-topic-create-consume-produce && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server RELEASE-NAME-kafka-headless:9092 --topic helm-test-topic-create-consume-produce --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"
  restartPolicy: Never

---
# Source: kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.2
    release: RELEASE-NAME
    heritage: Tiller
    component: server
spec:
  serviceName: RELEASE-NAME-zookeeper-headless
  replicas: 3
  terminationGracePeriodSeconds: 1800
  selector:
    matchLabels:
      app: zookeeper
      release: RELEASE-NAME
      component: server
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: zookeeper
        release: RELEASE-NAME
        component: server
      annotations:
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        
      containers:

        - name: zookeeper
          image: "gcr.io/google_samples/k8szk:v3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -xec
            - zkGenConfig.sh && exec zkServer.sh start-foreground
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
              
            - name: election
              containerPort: 3888
              protocol: TCP
              
            - name: server
              containerPort: 2888
              protocol: TCP
              
          livenessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          readinessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          env:
            - name: ZK_REPLICAS
              value: "3"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_CLIENT_PORT
              value: "2181"
            - name: ZK_ELECTION_PORT
              value: "3888"
            - name: ZK_HEAP_SIZE
              value: "1G"
            - name: ZK_INIT_LIMIT
              value: "5"
            - name: ZK_LOG_LEVEL
              value: "INFO"
            - name: ZK_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZK_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZK_MIN_SESSION_TIMEOUT
              value: "4000"
            - name: ZK_PURGE_INTERVAL
              value: "0"
            - name: ZK_SERVER_PORT
              value: "2888"
            - name: ZK_SNAP_RETAIN_COUNT
              value: "3"
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
          resources:
            {}
            
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper
      volumes:
        - name: data
          emptyDir: {}

---
# Source: kafka/templates/statefulset.yaml

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-kafka
  labels:
    app: kafka
    chart: kafka-0.8.8
    release: RELEASE-NAME
    heritage: Tiller
spec:
  serviceName: RELEASE-NAME-kafka-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
    
  replicas: 3
  template:
    metadata:
      labels:
        app: kafka
        release: RELEASE-NAME
    spec:
      ## ref: https://github.com/Yolean/kubernetes-kafka/blob/master/kafka/50kafka.yml
      initContainers:
      - name: init-ext
        image: "lwolf/kubectl_deployer:0.4"
        imagePullPolicy: "IfNotPresent"
        command:
          - sh
          - -euxc
          - "kubectl label pods ${POD_NAME} --namespace ${POD_NAMESPACE} pod=${POD_NAME} --overwrite"
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      containers:
      - name: kafka-broker
        image: "confluentinc/cp-kafka:4.1.2-2"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 31090
          name: external-0
        - containerPort: 31091
          name: external-1
        - containerPort: 31092
          name: external-2
        resources:
          {}
          
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_HEAP_OPTS
          value: -Xmx1G -Xms1G
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "RELEASE-NAME-zookeeper:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data/logs"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          unset KAFKA_PORT && \
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: "/opt/kafka/data"
      volumes:
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---
# Source: kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: RELEASE-NAME-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.2
    release: RELEASE-NAME
    heritage: Tiller
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: RELEASE-NAME
      component: server
  maxUnavailable: 1
  

---
# Source: kafka/charts/zookeeper/templates/config-jmx-exporter.yaml


---
# Source: kafka/charts/zookeeper/templates/job-chroots.yaml

---
# Source: kafka/templates/configmap-config.yaml

---
# Source: kafka/templates/configmap-jmx.yaml


---
# Source: kafka/templates/deployment-kafka-exporter.yaml


---
# Source: kafka/templates/job-config.yaml

---
# Source: kafka/templates/rbac.yaml


---
# Source: kafka/templates/servicemonitors.yaml

---


